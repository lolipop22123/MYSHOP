import logging
import sys
from aiogram import Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database import UserRepository, CategoryRepository, SubcategoryRepository, ProductRepository, OrderRepository
from bot.config import Config
from bot.locales.translations import get_text

logger = logging.getLogger(__name__)
router = Router()


async def notify_admins(bot, message: str, config: Config):
    """Send notification to all admins"""
    if not config.admin_ids:
        logger.warning("No admin IDs configured")
        return
    
    for admin_id in config.admin_ids:
        try:
            await bot.send_message(admin_id, message, parse_mode="HTML")
            logger.info(f"Admin notification sent to {admin_id}")
        except Exception as e:
            logger.error(f"Failed to send admin notification to {admin_id}: {e}")


class AdminStates(StatesGroup):
    """States for admin operations"""
    # Category states
    waiting_for_category_name = State()
    waiting_for_category_name_en = State()
    waiting_for_category_description = State()
    waiting_for_category_description_en = State()
    waiting_for_category_icon = State()
    
    # Subcategory states
    waiting_for_subcategory_name = State()
    waiting_for_subcategory_name_en = State()
    waiting_for_subcategory_description = State()
    waiting_for_subcategory_description_en = State()
    waiting_for_subcategory_icon = State()
    
    # Product states
    waiting_for_product_name = State()
    waiting_for_product_name_en = State()
    waiting_for_product_description = State()
    waiting_for_product_description_en = State()
    waiting_for_product_price = State()
    waiting_for_product_image = State()
    
    # Broadcast states
    waiting_for_broadcast_text = State()
    waiting_for_broadcast_photo = State()
    waiting_for_broadcast_photo_text = State()
    waiting_for_broadcast_confirm = State()
    
    # Premium pricing states
    waiting_for_premium_months = State()
    waiting_for_premium_price_usd = State()


def is_admin(user_id: int, config: Config) -> bool:
    """Check if user is admin"""
    is_admin_user = user_id in config.admin_ids
    logger.info(f"Admin check for user {user_id}: {is_admin_user} (admin_ids: {config.admin_ids})")
    return is_admin_user


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """Handle /admin command"""
    logger.info(f"Admin command received from user {message.from_user.id}")
    config = Config()
    
    if not is_admin(message.from_user.id, config):
        logger.warning(f"Access denied for user {message.from_user.id}")
        await message.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_admin_stats", "ru"), callback_data="admin_stats"),
            InlineKeyboardButton(text=get_text("btn_admin_categories", "ru"), callback_data="admin_categories")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_products", "ru"), callback_data="admin_products"),
            InlineKeyboardButton(text=get_text("btn_admin_orders", "ru"), callback_data="admin_orders")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üíé Premium –¶–µ–Ω—ã", callback_data="admin_premium_pricing")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_bot_status", "ru"), callback_data="admin_bot_status")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_main_menu", "ru"), callback_data="main_menu")
        ]
    ])
    
    await message.answer(
        get_text("admin_panel", "ru"),
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """Handle admin stats"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    # Get statistics
    user_repo = UserRepository(config.database_url)
    category_repo = CategoryRepository(config.database_url)
    product_repo = ProductRepository(config.database_url)
    order_repo = OrderRepository(config.database_url)
    
    pool = await user_repo.db_manager.get_pool()
    async with pool.acquire() as conn:
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users WHERE is_active = TRUE")
        chats_count = await conn.fetchval("SELECT COUNT(*) FROM chats WHERE is_active = TRUE")
        messages_count = await conn.fetchval("SELECT COUNT(*) FROM messages")
        today_messages = await conn.fetchval("""
            SELECT COUNT(*) FROM messages 
            WHERE created_at >= CURRENT_DATE
        """)
        products_count = await conn.fetchval("SELECT COUNT(*) FROM products WHERE is_active = TRUE")
        orders_count = await conn.fetchval("SELECT COUNT(*) FROM orders")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    stats_text = get_text("admin_stats", "ru").format(
        users=users_count,
        chats=chats_count,
        messages=messages_count,
        today_messages=today_messages,
        products=products_count,
        orders=orders_count
    )
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_categories")
async def admin_categories_callback(callback: CallbackQuery):
    """Handle admin categories"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_add_category", "ru"), callback_data="admin_add_category"),
            InlineKeyboardButton(text=get_text("btn_edit_category", "ru"), callback_data="admin_edit_categories")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_delete_category", "ru"), callback_data="admin_delete_categories"),
            InlineKeyboardButton(text=get_text("btn_add_subcategory", "ru"), callback_data="admin_add_subcategory")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        get_text("admin_categories", "ru"),
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_products")
async def admin_products_callback(callback: CallbackQuery):
    """Handle admin products"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_add_product", "ru"), callback_data="admin_add_product"),
            InlineKeyboardButton(text=get_text("btn_edit_product", "ru"), callback_data="admin_edit_products")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_delete_product", "ru"), callback_data="admin_delete_products")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        get_text("admin_products", "ru"),
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_orders")
async def admin_orders_callback(callback: CallbackQuery):
    """Handle admin orders"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_all_orders"),
            InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_orders")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_completed_orders"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_cancelled_orders")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        get_text("admin_orders", "ru"),
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    """Handle admin panel callback"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_admin_stats", "ru"), callback_data="admin_stats"),
            InlineKeyboardButton(text=get_text("btn_admin_categories", "ru"), callback_data="admin_categories")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_products", "ru"), callback_data="admin_products"),
            InlineKeyboardButton(text=get_text("btn_admin_orders", "ru"), callback_data="admin_orders")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üíé Premium –¶–µ–Ω—ã", callback_data="admin_premium_pricing")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_bot_status", "ru"), callback_data="admin_bot_status")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_main_menu", "ru"), callback_data="main_menu")
        ]
    ])
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# Category management
@router.callback_query(F.data == "admin_add_category")
async def admin_add_category_callback(callback: CallbackQuery, state: FSMContext):
    """Start adding category"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    await state.set_state(AdminStates.waiting_for_category_name)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=keyboard
    )


@router.message(AdminStates.waiting_for_category_name)
async def handle_category_name(message: Message, state: FSMContext):
    """Handle category name input"""
    await state.update_data(category_name=message.text)
    await state.set_state(AdminStates.waiting_for_category_name_en)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=keyboard
    )


@router.message(AdminStates.waiting_for_category_name_en)
async def handle_category_name_en(message: Message, state: FSMContext):
    """Handle category name in English"""
    await state.update_data(category_name_en=message.text)
    await state.set_state(AdminStates.waiting_for_category_description)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=keyboard
    )


@router.message(AdminStates.waiting_for_category_description)
async def handle_category_description(message: Message, state: FSMContext):
    """Handle category description"""
    await state.update_data(category_description=message.text)
    await state.set_state(AdminStates.waiting_for_category_description_en)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description_en"),
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=keyboard
    )


@router.message(AdminStates.waiting_for_category_description_en)
async def handle_category_description_en(message: Message, state: FSMContext):
    """Handle category description in English"""
    await state.update_data(category_description_en=message.text)
    await state.set_state(AdminStates.waiting_for_category_icon)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶", callback_data="icon_üì¶"),
            InlineKeyboardButton(text="üéÆ", callback_data="icon_üéÆ"),
            InlineKeyboardButton(text="üíé", callback_data="icon_üíé"),
            InlineKeyboardButton(text="üéÅ", callback_data="icon_üéÅ")
        ],
        [
            InlineKeyboardButton(text="üîß", callback_data="icon_üîß"),
            InlineKeyboardButton(text="üì±", callback_data="icon_üì±"),
            InlineKeyboardButton(text="üíª", callback_data="icon_üíª"),
            InlineKeyboardButton(text="üéØ", callback_data="icon_üéØ")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await message.answer(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("icon_"))
async def handle_category_icon(callback: CallbackQuery, state: FSMContext):
    """Handle category icon selection"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    icon = callback.data.replace("icon_", "")
    await state.update_data(category_icon=icon)
    
    # Get all data and create category
    data = await state.get_data()
    await state.clear()
    
    category_repo = CategoryRepository(config.database_url)
    
    try:
        category = await category_repo.create_category(
            name=data.get("category_name"),
            name_en=data.get("category_name_en"),
            description=data.get("category_description"),
            description_en=data.get("category_description_en"),
            icon=data.get("category_icon", "üì¶")
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text("btn_admin_categories", "ru"), callback_data="admin_categories")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error creating category: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=get_text("btn_admin_categories", "ru"), callback_data="admin_categories")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}",
            reply_markup=keyboard
        )


@router.callback_query(F.data == "skip_description")
async def skip_description_callback(callback: CallbackQuery, state: FSMContext):
    """Skip description"""
    await state.update_data(category_description=None)
    await state.set_state(AdminStates.waiting_for_category_description_en)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description_en"),
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "skip_description_en")
async def skip_description_en_callback(callback: CallbackQuery, state: FSMContext):
    """Skip description in English"""
    await state.update_data(category_description_en=None)
    await state.set_state(AdminStates.waiting_for_category_icon)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶", callback_data="icon_üì¶"),
            InlineKeyboardButton(text="üéÆ", callback_data="icon_üéÆ"),
            InlineKeyboardButton(text="üíé", callback_data="icon_üíé"),
            InlineKeyboardButton(text="üéÅ", callback_data="icon_üéÅ")
        ],
        [
            InlineKeyboardButton(text="üîß", callback_data="icon_üîß"),
            InlineKeyboardButton(text="üì±", callback_data="icon_üì±"),
            InlineKeyboardButton(text="üíª", callback_data="icon_üíª"),
            InlineKeyboardButton(text="üéØ", callback_data="icon_üéØ")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_categories")
        ]
    ])
    
    await callback.message.edit_text(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )


# Broadcast functionality
@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery):
    """Handle broadcast menu"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="broadcast_text"),
            InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="broadcast_photo")
        ],
        [
            InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ + –¢–µ–∫—Å—Ç", callback_data="broadcast_photo_text")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "broadcast_text")
async def broadcast_text_callback(callback: CallbackQuery, state: FSMContext):
    """Start text broadcast"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    await state.set_state(AdminStates.waiting_for_broadcast_text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_broadcast")
        ]
    ])
    
    await callback.message.edit_text(
        "üìù <b>–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã HTML —Ç–µ–≥–æ–≤:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–∫–æ–¥</code>\n"
        "‚Ä¢ <a href='—Å—Å—ã–ª–∫–∞'>—Å—Å—ã–ª–∫–∞</a>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(AdminStates.waiting_for_broadcast_text)
async def handle_broadcast_text(message: Message, state: FSMContext):
    """Handle broadcast text input"""
    config = Config()
    
    if not is_admin(message.from_user.id, config):
        await message.answer(get_text("access_denied", "ru"))
        return
    
    await state.update_data(broadcast_text=message.text)
    await state.set_state(AdminStates.waiting_for_broadcast_confirm)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    await message.answer(
        f"üìù <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n{message.text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "broadcast_photo")
async def broadcast_photo_callback(callback: CallbackQuery, state: FSMContext):
    """Start photo broadcast"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    await state.set_state(AdminStates.waiting_for_broadcast_photo)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_broadcast")
        ]
    ])
    
    await callback.message.edit_text(
        "üñºÔ∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(AdminStates.waiting_for_broadcast_photo)
async def handle_broadcast_photo(message: Message, state: FSMContext):
    """Handle broadcast photo input"""
    config = Config()
    
    if not is_admin(message.from_user.id, config):
        await message.answer(get_text("access_denied", "ru"))
        return
    
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
        return
    
    photo_id = message.photo[-1].file_id
    await state.update_data(broadcast_photo=photo_id)
    await state.set_state(AdminStates.waiting_for_broadcast_confirm)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    await message.answer(
        "üñºÔ∏è <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n–§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "broadcast_photo_text")
async def broadcast_photo_text_callback(callback: CallbackQuery, state: FSMContext):
    """Start photo with text broadcast"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    await state.set_state(AdminStates.waiting_for_broadcast_photo_text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_broadcast")
        ]
    ])
    
    await callback.message.edit_text(
        "üñºÔ∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(AdminStates.waiting_for_broadcast_photo_text)
async def handle_broadcast_photo_text(message: Message, state: FSMContext):
    """Handle broadcast photo with text input"""
    config = Config()
    
    if not is_admin(message.from_user.id, config):
        await message.answer(get_text("access_denied", "ru"))
        return
    
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é!")
        return
    
    photo_id = message.photo[-1].file_id
    caption = message.caption or ""
    
    await state.update_data(broadcast_photo=photo_id, broadcast_text=caption)
    await state.set_state(AdminStates.waiting_for_broadcast_confirm)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    await message.answer(
        f"üñºÔ∏è <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """Confirm and send broadcast"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    data = await state.get_data()
    await state.clear()
    
    # Get all users
    user_repo = UserRepository(config.database_url)
    users = await user_repo.get_all_users()
    
    if not users:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return
    
    # Send broadcast
    bot = callback.bot
    success_count = 0
    error_count = 0
    
    progress_message = await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    for user in users:
        try:
            if data.get("broadcast_photo") and data.get("broadcast_text"):
                # Photo with text
                await bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=data["broadcast_photo"],
                    caption=data["broadcast_text"],
                    parse_mode="HTML"
                )
            elif data.get("broadcast_photo"):
                # Photo only
                await bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=data["broadcast_photo"]
                )
            elif data.get("broadcast_text"):
                # Text only
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=data["broadcast_text"],
                    parse_mode="HTML"
                )
            
            success_count += 1
            
            # Update progress every 10 users
            if success_count % 10 == 0:
                await progress_message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏... {success_count}/{len(users)}")
                
        except Exception as e:
            logger.error(f"Error sending broadcast to user {user.telegram_id}: {e}")
            error_count += 1
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await progress_message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    """Cancel broadcast"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "admin_bot_status")
async def admin_bot_status_callback(callback: CallbackQuery):
    """Handle bot status check"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    import time
    import psutil
    import os
    
    # Get bot uptime (since process start)
    process = psutil.Process(os.getpid())
    uptime_seconds = time.time() - process.create_time()
    uptime_hours = int(uptime_seconds // 3600)
    uptime_minutes = int((uptime_seconds % 3600) // 60)
    
    # Get system info
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    memory_percent = memory.percent
    
    # Get database connection status
    try:
        user_repo = UserRepository(config.database_url)
        await user_repo.get_all_users()
        db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
    except Exception as e:
        db_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}"
    
    status_message = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
    status_message += f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_hours}—á {uptime_minutes}–º\n"
    status_message += f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}\n"
    status_message += f"üñ•Ô∏è <b>CPU:</b> {cpu_percent}%\n"
    status_message += f"üß† <b>RAM:</b> {memory_percent}%\n"
    status_message += f"üÜî <b>PID:</b> {os.getpid()}\n"
    status_message += f"üêç <b>Python:</b> {sys.version.split()[0]}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_bot_status")
        ],
        [
            InlineKeyboardButton(text=get_text("btn_admin_panel", "ru"), callback_data="admin_panel")
        ]
    ])
    
    await callback.message.edit_text(
        status_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_premium_pricing")
async def admin_premium_pricing_callback(callback: CallbackQuery):
    """Handle premium pricing management"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    try:
        from bot.database.connection import get_connection
        from bot.database.repository import PremiumPricingRepository
        
        pool = await get_connection(config.database_url)
        pricing_repo = PremiumPricingRepository(pool)
        all_pricing = await pricing_repo.get_all_pricing()
        
        if not all_pricing:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω")
            return
        
        # Create pricing display
        pricing_text = "üíé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ Telegram Premium</b>\n\n"
        pricing_text += "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>\n"
        
        keyboard_buttons = []
        for pricing in all_pricing:
            status_icon = "‚úÖ" if pricing.is_active else "‚ùå"
            pricing_text += f"{status_icon} <b>{pricing.months} –º–µ—Å—è—Ü–µ–≤:</b> ${pricing.price_usd}\n"
            
            # Add edit button for each pricing
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {pricing.months}–º - ${pricing.price_usd}", 
                    callback_data=f"edit_premium_{pricing.months}"
                )
            ])
        
        # Add toggle and back buttons
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_premium_pricing")
        ])
        keyboard_buttons.append([
            InlineKeyboardButton(text=get_text("btn_back", "ru"), callback_data="admin_panel")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            pricing_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error loading premium pricing: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω")


@router.callback_query(F.data.startswith("edit_premium_"))
async def edit_premium_pricing_callback(callback: CallbackQuery, state: FSMContext):
    """Handle edit premium pricing"""
    config = Config()
    
    if not is_admin(callback.from_user.id, config):
        await callback.answer(get_text("access_denied", "ru"))
        return
    
    months = int(callback.data.split("_")[-1])
    
    # Store months in state
    await state.update_data(months=months)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_premium_pricing")
        ]
    ])
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è {months} –º–µ—Å—è—Ü–µ–≤</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_premium_price_usd)


@router.message(AdminStates.waiting_for_premium_price_usd)
async def handle_premium_price_usd(message: Message, state: FSMContext):
    """Handle USD price input for premium"""
    config = Config()
    
    if not is_admin(message.from_user.id, config):
        await message.answer(get_text("access_denied", "ru"))
        await state.clear()
        return
    
    try:
        price_usd = float(message.text.replace(',', '.'))
        if price_usd <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # Get stored data
        data = await state.get_data()
        months = data.get('months')
        
        if not months:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # Update pricing in database
        try:
            from bot.database.connection import get_connection
            from bot.database.repository import PremiumPricingRepository
            
            pool = await get_connection(config.database_url)
            pricing_repo = PremiumPricingRepository(pool)
            success = await pricing_repo.update_pricing(months, price_usd)
            
            if success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="admin_premium_pricing")
                    ]
                ])
                
                await message.answer(
                    f"‚úÖ <b>–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                    f"üíé <b>{months} –º–µ—Å—è—Ü–µ–≤:</b> ${price_usd}\n\n"
                    f"–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
        except Exception as e:
            logger.error(f"Error updating premium pricing: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.99):")


def register_admin_handlers(dp: Dispatcher):
    """Register admin handlers"""
    dp.include_router(router) 